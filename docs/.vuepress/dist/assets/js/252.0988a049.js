(window.webpackJsonp=window.webpackJsonp||[]).push([[252],{618:function(e,s,n){"use strict";n.r(s);var t=n(45),a=Object(t.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"grep命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#grep命令"}},[e._v("#")]),e._v(" grep命令")]),e._v(" "),n("p",[n("code",[e._v("grep")]),e._v("命令用于查找文件里符合条件的字符串，如果发现某文件的内容符合所指定的模式，"),n("code",[e._v("grep")]),e._v("命令会把含有模式的那一行显示出来。若不指定任何文件名称，或是所给予的文件名为"),n("code",[e._v("-")]),e._v("，则"),n("code",[e._v("grep")]),e._v("指令会从标准输入设备读取数据。")]),e._v(" "),n("h2",{attrs:{id:"语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[e._v("#")]),e._v(" 语法")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("OPTION"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(". PATTERN "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("FILE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v(".\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h2",{attrs:{id:"参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参数"}},[e._v("#")]),e._v(" 参数")]),e._v(" "),n("ul",[n("li",[n("code",[e._v("-A NUM, --after-context=NUM")]),e._v(": 在匹配行之后打印尾部上下文的"),n("code",[e._v("NUM")]),e._v("行，在相邻的匹配组之间放置包含"),n("code",[e._v("--")]),e._v("的行。")]),e._v(" "),n("li",[n("code",[e._v("-a, --text")]),e._v(": 像处理文本一样处理二进制文件，这相当于"),n("code",[e._v("--binary files=text")]),e._v("选项。")]),e._v(" "),n("li",[n("code",[e._v("-B NUM, --before-context=NUM")]),e._v(": 在匹配行之前打印前导上下文的"),n("code",[e._v("NUM")]),e._v("行，在相邻的匹配组之间放置包含"),n("code",[e._v("--")]),e._v("的行。")]),e._v(" "),n("li",[n("code",[e._v("-C NUM, --context=NUM")]),e._v(": 打印输出上下文的"),n("code",[e._v("NUM")]),e._v("行，在相邻的匹配组之间放置包含"),n("code",[e._v("--")]),e._v("的行。")]),e._v(" "),n("li",[n("code",[e._v("-b, --byte-offset")]),e._v(": 打印输入文件中每行输出之前的字节偏移量。")]),e._v(" "),n("li",[n("code",[e._v("--binary-files=TYPE")]),e._v(": 如果文件的前几个字节指示该文件包含二进制数据，则假定该文件为类型类型。默认情况下，"),n("code",[e._v("TYPE")]),e._v("是"),n("code",[e._v("binary")]),e._v("，"),n("code",[e._v("grep")]),e._v("通常输出一行消息，说明二进制文件匹配，或者不输出消息(如果不匹配)。如果"),n("code",[e._v("TYPE")]),e._v("不匹配，"),n("code",[e._v("grep")]),e._v("假设二进制文件不匹配，这相当于"),n("code",[e._v("-I")]),e._v("选项。如果"),n("code",[e._v("TYPE")]),e._v("是"),n("code",[e._v("text")]),e._v("，"),n("code",[e._v("grep")]),e._v("会像处理文本一样处理二进制文件，这相当于"),n("code",[e._v("-a")]),e._v("选项。此外"),n("code",[e._v("grep--binary files=text")]),e._v("可能会输出二进制垃圾，如果输出是终端，并且终端驱动程序将其中的一些解释为命令，则会产生严重的副作用。")]),e._v(" "),n("li",[n("code",[e._v("--colour[=WHEN], --color[=WHEN]")]),e._v(": 在匹配字符串周围加上标记"),n("code",[e._v("find in GREP_COLOR")]),e._v("环境变量，"),n("code",[e._v("WHEN")]),e._v("可以是"),n("code",[e._v("never")]),e._v("、"),n("code",[e._v("always")]),e._v("、"),n("code",[e._v("auto")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("-c, --count")]),e._v(": 禁止正常输出，而是为每个输入文件打印匹配行的计数，使用"),n("code",[e._v("-v，--invert match")]),e._v("选项，计算不匹配的行数。")]),e._v(" "),n("li",[n("code",[e._v("-D ACTION, --devices=ACTION")]),e._v(": 如果输入文件是设备、"),n("code",[e._v("FIFO")]),e._v("或套接字，使用"),n("code",[e._v("ACTION")]),e._v("来处理它。默认情况下，"),n("code",[e._v("ACTION")]),e._v("是"),n("code",[e._v("read")]),e._v("，这意味着设备的读取就像它们是普通文件一样，如果"),n("code",[e._v("ACTION")]),e._v("为"),n("code",[e._v("skip")]),e._v("，则设备将自动跳过。")]),e._v(" "),n("li",[n("code",[e._v("-d ACTION, --directories=ACTION")]),e._v(": 如果输入文件是目录，使用"),n("code",[e._v("ACTION")]),e._v("来处理它。默认情况下，"),n("code",[e._v("ACTION")]),e._v("是"),n("code",[e._v("read")]),e._v("，这意味着目录的读取就像它们是普通文件一样，如果"),n("code",[e._v("ACTION")]),e._v("是"),n("code",[e._v("skip")]),e._v("，则目录将被自动跳过，如果"),n("code",[e._v("ACTION")]),e._v("是递归的，"),n("code",[e._v("grep")]),e._v("将递归地读取每个目录下的所有文件，这相当于"),n("code",[e._v("-r")]),e._v("选项。")]),e._v(" "),n("li",[n("code",[e._v("-E, --extended-regexp")]),e._v(": 将模式解释为扩展的正则表达式。")]),e._v(" "),n("li",[n("code",[e._v("-e PATTERN, --regexp=PATTERN")]),e._v(": 使用"),n("code",[e._v("PATTERN")]),e._v("作为模式，用于保护以"),n("code",[e._v("-")]),e._v("开头的模式。")]),e._v(" "),n("li",[n("code",[e._v("-F, --fixed-strings")]),e._v(": 将"),n("code",[e._v("PATTERN")]),e._v("解释为固定字符串的列表，用换行符分隔，这些字符串可以匹配。")]),e._v(" "),n("li",[n("code",[e._v("-P, --perl-regexp")]),e._v(": 将"),n("code",[e._v("PATTERN")]),e._v("解释为"),n("code",[e._v("Perl")]),e._v("正则表达式。")]),e._v(" "),n("li",[n("code",[e._v("-f FILE, --file=FILE")]),e._v(": 从"),n("code",[e._v("FILE")]),e._v("获取模式，每行一个，空文件包含零个模式，因此不匹配。")]),e._v(" "),n("li",[n("code",[e._v("-G, --basic-regexp")]),e._v(": 将"),n("code",[e._v("PATTERN")]),e._v("解释为基本正则表达式，这是默认值。")]),e._v(" "),n("li",[n("code",[e._v("-H, --with-filename")]),e._v(": 打印每个匹配项的文件名。")]),e._v(" "),n("li",[n("code",[e._v("-h, --no-filename")]),e._v(": 当搜索多个文件时，禁止在输出中使用文件名前缀。")]),e._v(" "),n("li",[n("code",[e._v("--help")]),e._v(": 显示帮助文件。")]),e._v(" "),n("li",[n("code",[e._v("-I")]),e._v(": 处理二进制文件，就像它不包含匹配数据一样，这相当于"),n("code",[e._v("--binary-files=without-match")]),e._v("选项。")]),e._v(" "),n("li",[n("code",[e._v("-i, --ignore-case")]),e._v(": 忽略"),n("code",[e._v("PATTERN")]),e._v("和输入文件中的大小写区别。")]),e._v(" "),n("li",[n("code",[e._v("-L, --files-without-match")]),e._v(": 禁止正常输出，而是打印通常不会从中打印输出的每个输入文件的名称，扫描将在第一个匹配时停止。")]),e._v(" "),n("li",[n("code",[e._v("-l, --files-with-matches")]),e._v(": 禁止正常输出，而是打印通常从中打印输出的每个输入文件的名称，扫描将在第一个匹配时停止。")]),e._v(" "),n("li",[n("code",[e._v("-m NUM, --max-count=NUM")]),e._v(": 在匹配行数之后停止读取文件。如果输入是来自常规文件的标准输入，并且输出"),n("code",[e._v("NUM")]),e._v("个匹配行，"),n("code",[e._v("grep")]),e._v("确保标准输入在退出之前定位到最后一个匹配行之后，而不管是否存在后续上下文行。这使调用进程能够继续(恢复)搜索，当"),n("code",[e._v("grep")]),e._v("在NUM个匹配行之后停止时，它输出任何后面的上下文行。当"),n("code",[e._v("-c")]),e._v("或"),n("code",[e._v("--count")]),e._v("选项也被使用时，"),n("code",[e._v("grep")]),e._v("不会输出大于"),n("code",[e._v("NUM")]),e._v("的计数。当"),n("code",[e._v("-v")]),e._v("或"),n("code",[e._v("--invert match")]),e._v("选项也被使用时，"),n("code",[e._v("grep")]),e._v("会在输出"),n("code",[e._v("NUM")]),e._v("个不匹配的行之后停止。")]),e._v(" "),n("li",[n("code",[e._v("--mmap")]),e._v(": 如果可能，使用"),n("code",[e._v("mmap")]),e._v("系统调用来读取输入，而不是默认的读取系统调用。在某些情况下，"),n("code",[e._v("--mmap")]),e._v("可以产生更好的性能。但是，如果在"),n("code",[e._v("grep")]),e._v("操作时输入文件收缩，或者发生"),n("code",[e._v("I/O")]),e._v("错误，那么"),n("code",[e._v("--mmap")]),e._v("可能会导致未定义的行为(包括核心转储)。")]),e._v(" "),n("li",[n("code",[e._v("-n, --line-number")]),e._v(": 在输出的每一行前面加上输入文件中的行号。")]),e._v(" "),n("li",[n("code",[e._v("-o, --only-matching")]),e._v(": 只显示匹配行中与模式匹配的部分。")]),e._v(" "),n("li",[n("code",[e._v("--label=LABEL")]),e._v(": 将实际来自标准输入的输入显示为来自文件"),n("code",[e._v("LABEL")]),e._v("的输入。这对于"),n("code",[e._v("zgrep")]),e._v("之类的工具尤其有用，例如"),n("code",[e._v("gzip -cd foo.gz | grep -H --label = foo")]),e._v("。")]),e._v(" "),n("li",[n("code",[e._v("--line-buffered")]),e._v(": 使用行缓冲，这可能会导致性能损失。")]),e._v(" "),n("li",[n("code",[e._v("-q, --quiet, --silent")]),e._v(": 保持安静，不向标准输出写入任何内容。如果找到任何匹配项，即使检测到错误，也立即退出，状态为零。")]),e._v(" "),n("li",[n("code",[e._v("-R, -r, --recursive")]),e._v(": 递归地读取每个目录下的所有文件，这相当于"),n("code",[e._v("-d recurse")]),e._v("选项。")]),e._v(" "),n("li",[n("code",[e._v("-s, --no-messages")]),e._v(": 禁止显示有关不存在或不可读文件的错误消息。")]),e._v(" "),n("li",[n("code",[e._v("-U, --binary")]),e._v(": 将文件视为二进制文件。默认情况下，在"),n("code",[e._v("MS-DOS")]),e._v("和"),n("code",[e._v("MS Windows")]),e._v("下，"),n("code",[e._v("grep")]),e._v("通过查看从文件中读取的第一个"),n("code",[e._v("32KB")]),e._v("的内容来猜测文件类型。如果"),n("code",[e._v("grep")]),e._v("确定文件是文本文件，它将从原始文件内容中删除"),n("code",[e._v("CR")]),e._v("字符(以使带有"),n("code",[e._v("^")]),e._v("和"),n("code",[e._v("$")]),e._v("的正则表达式正常工作)。指定"),n("code",[e._v("-U")]),e._v("会推翻这种猜测，导致读取所有文件并逐字传递给匹配机制，如果文件是一个文本文件，每行末尾都有"),n("code",[e._v("CR/LF")]),e._v("对，这将导致某些正则表达式失败。此选项对"),n("code",[e._v("MS-DOS")]),e._v("和"),n("code",[e._v("MS Windows")]),e._v("以外的平台无效。")]),e._v(" "),n("li",[n("code",[e._v("-u, --unix-byte-offsets")]),e._v(": 报告"),n("code",[e._v("Unix")]),e._v("样式的字节偏移量，此开关使"),n("code",[e._v("grep")]),e._v("报告字节偏移，就好像该文件是"),n("code",[e._v("Unix")]),e._v("样式的文本文件一样，即去除了"),n("code",[e._v("CR")]),e._v("字符。这将产生与在"),n("code",[e._v("Unix")]),e._v("机器上运行"),n("code",[e._v("grep")]),e._v("相同的结果，除非也使用"),n("code",[e._v("-b")]),e._v("选项，否则该选项无效。它对除"),n("code",[e._v("MS-DOS")]),e._v("和"),n("code",[e._v("MS-Windows")]),e._v("以外的平台没有影响。")]),e._v(" "),n("li",[n("code",[e._v("-V, --version")]),e._v(": 输出版本信息。")]),e._v(" "),n("li",[n("code",[e._v("-v, --invert-match")]),e._v(": 反转匹配的意义，以选择不匹配的行。")]),e._v(" "),n("li",[n("code",[e._v("-w, --word-regexp")]),e._v(": 只选择与表单中包含的单词匹配的行。测试是匹配的子串必须在行的开头，或者前面有非单词组成字符，同样，它必须位于行的末尾，或者后跟非单词组成字符。单词组成字符是字母、数字和下划线。")]),e._v(" "),n("li",[n("code",[e._v("-x, --line-regexp")]),e._v(": 仅选择与整行完全匹配的那些匹配项。")]),e._v(" "),n("li",[n("code",[e._v("-Z, --null")]),e._v(": 输出零字节("),n("code",[e._v("ASCII NULL")]),e._v("字符)，而不是通常在文件名后的字符。例如"),n("code",[e._v("grep -lZ")]),e._v("在每个文件名之后输出一个零字节，而不是通常的换行符。即使存在包含不寻常字符(例如换行符)的文件名，此选项也可以使输出明确。此选项可与"),n("code",[e._v("find -print0")]),e._v("、"),n("code",[e._v("perl -0")]),e._v("、"),n("code",[e._v("sort -z")]),e._v("和"),n("code",[e._v("xargs -0")]),e._v("等命令一起使用，以处理任意文件名，即使是包含换行符的文件名。")])]),e._v(" "),n("h2",{attrs:{id:"示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),n("p",[n("code",[e._v("hello.c")]),e._v("文件内容如下:")]),e._v(" "),n("div",{staticClass:"language-c line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("<stdio.h>")])]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token macro property"}},[n("span",{pre:!0,attrs:{class:"token directive-hash"}},[e._v("#")]),n("span",{pre:!0,attrs:{class:"token directive keyword"}},[e._v("include")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v("<stdlib.h>")])]),e._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token function"}},[e._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Hello World\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n   "),n("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("匹配带有"),n("code",[e._v("Hello")]),e._v("的行。")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" Hello hello.c\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    printf("Hello World\\n");')]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("匹配带有"),n("code",[e._v("Hello")]),e._v("行的数量。")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -c Hello hello.c\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 3")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("反转匹配的意义，选择不匹配"),n("code",[e._v("Hello")]),e._v("的行。")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -v Hello hello.c\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# #include <stdio.h>")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# #include <stdlib.h>")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# int main() {")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    return 0;")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# }")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("匹配带有"),n("code",[e._v("i")]),e._v("的行并忽略大小写。")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -i I hello.c\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# #include <stdio.h>")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# #include <stdlib.h>")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# int main() {")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('#    printf("Hello World\\n");')]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("仅输出与文件整行匹配的行。")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -x "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"   return 0;"')]),e._v(" hello.c\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#    return 0;")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("匹配带有"),n("code",[e._v("Hello")]),e._v("的行并输出行号。")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -n Hello hello.c\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 5:   printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 6:   printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# 7:   printf("Hello World\\n");')]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br")])]),n("p",[e._v("递归匹配当前目录下所有文件中能够匹配"),n("code",[e._v("h*")]),e._v("的文件，输出行号并忽略大小写，注意实际在终端中匹配成功的位置会使用红色字体标注。")]),e._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[e._v("grep")]),e._v(" -rni "),n("span",{pre:!0,attrs:{class:"token string"}},[e._v('"h*"')]),e._v(" ./\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./hello.c:1:#include <stdio.h>")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./hello.c:2:#include <stdlib.h>")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./hello.c:3:")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./hello.c:4:int main() {")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# ./hello.c:5:   printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# ./hello.c:6:   printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v('# ./hello.c:7:   printf("Hello World\\n");')]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./hello.c:8:   return 0;")]),e._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# ./hello.c:9:}")]),e._v("\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("h2",{attrs:{id:"每日一题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[e._v("#")]),e._v(" 每日一题")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("https://github.com/WindrunnerMax/EveryDay\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("h2",{attrs:{id:"参考"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[e._v("#")]),e._v(" 参考")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("https://www.runoob.com/linux/linux-comm-grep.html\nhttps://www.tutorialspoint.com/unix_commands/grep.htm\nhttps://www.geeksforgeeks.org/fold-command-in-linux-with-examples/\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br")])])])}),[],!1,null,null,null);s.default=a.exports}}]);