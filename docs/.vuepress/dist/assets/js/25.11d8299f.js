(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{394:function(v,_,e){"use strict";e.r(_);var a=e(45),t=Object(a.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"osi七层模型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#osi七层模型"}},[v._v("#")]),v._v(" OSI七层模型")]),v._v(" "),e("p",[e("code",[v._v("OSI")]),v._v("七层模型包括物理层、数据链路层、网络层、运输层、会话层、表示层、应用层，其中会话层、表示层、应用层一般统称为应用层，在"),e("code",[v._v("TCP/IP")]),v._v("四层模型中物理层与数据链路层归为网络接口层，网络层与运输层是单独的层级，会话层、表示层、应用层归为应用层。")]),v._v(" "),e("h2",{attrs:{id:"物理层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#物理层"}},[v._v("#")]),v._v(" 物理层")]),v._v(" "),e("p",[v._v("物理层的主要任务描述为确定与传输媒体的接口的一些特性，提供用于建立、保持和断开物理连接的机械的、电气的、功能的和过程的条件，也就是说物理层提供有关同步和比特流在物理媒体上的传输手段。")]),v._v(" "),e("h3",{attrs:{id:"信号相关概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#信号相关概念"}},[v._v("#")]),v._v(" 信号相关概念")]),v._v(" "),e("ul",[e("li",[v._v("单向通信，也称单工通信，只能有一个方向的通信而没有反方向的交互。")]),v._v(" "),e("li",[v._v("双向交替通信，也称半双工通信，通信的双方都可以发送信息，但不能双方同时发送，也不能同时接收。")]),v._v(" "),e("li",[v._v("双向同时通信，也称全双工通信，通信的双方可以同时发送和接收信息。")]),v._v(" "),e("li",[v._v("基带信号，即基本频带信号，来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。")]),v._v(" "),e("li",[v._v("带通信号，把基带信号经过载波调制后，把信号的频率范围搬移到较高的频段以便在信道中传输，即仅在一段频率范围内能够通过信道。")])]),v._v(" "),e("h3",{attrs:{id:"基本二元调制方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本二元调制方法"}},[v._v("#")]),v._v(" 基本二元调制方法")]),v._v(" "),e("ul",[e("li",[v._v("调幅"),e("code",[v._v("AM")]),v._v("：载波的振幅随基带数字信号而变化。")]),v._v(" "),e("li",[v._v("调频"),e("code",[v._v("FM")]),v._v("：载波的频率随基带数字信号而变化。")]),v._v(" "),e("li",[v._v("调相"),e("code",[v._v("PM")]),v._v("：载波的初始相位随基带数字信号而变化。")])]),v._v(" "),e("h3",{attrs:{id:"信道复用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#信道复用"}},[v._v("#")]),v._v(" 信道复用")]),v._v(" "),e("ul",[e("li",[v._v("频分复用"),e("code",[v._v("FDM")]),v._v(": 将用于传输信道的总带宽划分成若干个子频带或称为子信道，每一个子信道传输"),e("code",[v._v("1")]),v._v("路信号。")]),v._v(" "),e("li",[v._v("时分复用"),e("code",[v._v("TDM")]),v._v(": 时分复用则是将时间划分为一段段等长的时分复用帧"),e("code",[v._v("TDM")]),v._v("帧，每一个时分复用的用户在每一个"),e("code",[v._v("TDM")]),v._v("帧中占用固定序号的时隙。")]),v._v(" "),e("li",[v._v("统计时分复用"),e("code",[v._v("STDM")]),v._v(": 根据用户实际需要动态分配线路资源的时分复用方法，只有当用户有数据要传输时才给他分配线路资源。")]),v._v(" "),e("li",[v._v("波分复用"),e("code",[v._v("WDM")]),v._v(": 就是光的频分复用。")]),v._v(" "),e("li",[v._v("码分复用"),e("code",[v._v("CDM")]),v._v(": 靠不同的编码来区分各路原始信号，有码分多址，频分多址、时分多址和同步码分多址等相关技术。")])]),v._v(" "),e("h2",{attrs:{id:"数据链路层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据链路层"}},[v._v("#")]),v._v(" 数据链路层")]),v._v(" "),e("p",[v._v("数据链路层用于建立、维持和拆除链路连接，实现无差错传输的功能。将比特组合成字节，再将字节组合成帧，使用链路层地址，在以太网使用"),e("code",[v._v("MAC")]),v._v("地址，来访问介质，并进行差错检测。")]),v._v(" "),e("h3",{attrs:{id:"基本功能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基本功能"}},[v._v("#")]),v._v(" 基本功能")]),v._v(" "),e("ul",[e("li",[v._v("封装成帧: 在一段数据的前后分别添加首部和尾部，然后就构成了一个帧，确定帧的界限。")]),v._v(" "),e("li",[v._v("透明传输: 当帧中出现控制字符时便插入一个转义字符，通常采用字符填充或零比特填充的方式。")]),v._v(" "),e("li",[v._v("差错控制: 由于物理线路存在噪声，可能出现比特差错，可以采用纠错码或检测码的方式进行差错控制，由于纠错码较为复杂且携带较多冗余信息，一般采用检测码配合重传机制，一般常用检测码是循环冗余编码"),e("code",[v._v("CRC")]),v._v("。")])]),v._v(" "),e("h3",{attrs:{id:"ppp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ppp协议"}},[v._v("#")]),v._v(" PPP协议")]),v._v(" "),e("ul",[e("li",[v._v("简单")]),v._v(" "),e("li",[v._v("封装成帧")]),v._v(" "),e("li",[v._v("透明性")]),v._v(" "),e("li",[v._v("多种网络层协议")]),v._v(" "),e("li",[v._v("多种类型链路")]),v._v(" "),e("li",[v._v("差错检测")]),v._v(" "),e("li",[v._v("检测连接状态")]),v._v(" "),e("li",[v._v("最大传送单元")]),v._v(" "),e("li",[v._v("网络层地址协商")]),v._v(" "),e("li",[v._v("数据压缩协商")])]),v._v(" "),e("h3",{attrs:{id:"以太网csma-cd协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#以太网csma-cd协议"}},[v._v("#")]),v._v(" 以太网CSMA/CD协议")]),v._v(" "),e("ul",[e("li",[v._v("多点接入: 许多计算机以多点接入的方式连接在一根总线上。")]),v._v(" "),e("li",[v._v("载波监听: 每一个站在发送数据之前先要检测一下总线上是否有其他计算机在发送数据，如果有，则暂时不要发送数据，以免发生碰撞。")]),v._v(" "),e("li",[v._v("碰撞检测: 也称为冲突检测，当总线上至少有两个站同时在发送数据，表明产生了碰撞。")]),v._v(" "),e("li",[v._v("半双工通信: 通信的双方都可以发送信息，但不能双方同时发送，也不能同时接收。")]),v._v(" "),e("li",[v._v("争用期: 将端到端往返时延称为争用期，经过争用期这段时间还没有检测到碰撞，就能肯定这次发送不会发生碰撞，以太网取"),e("code",[v._v("51.2")]),v._v("微秒为争用期。")]),v._v(" "),e("li",[v._v("二进制指数类型退避算法: 发生碰撞的站在停止发送数据后，要推迟一个随机时间才能再发送数据。")]),v._v(" "),e("li",[v._v("最短有效帧长: 如果发生冲突，就一定是在发送的前"),e("code",[v._v("64")]),v._v("字节之内，以太网规定凡长度小于"),e("code",[v._v("64")]),v._v("字节的帧都是由于冲突而异常中止的无效帧。")]),v._v(" "),e("li",[v._v("透明网桥: 网桥通过自学习和转发帧以及生成树算法，记录"),e("code",[v._v("MAC")]),v._v("地址和接口信息，生成转发表，从而拓展局域网。")])]),v._v(" "),e("h2",{attrs:{id:"网络层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[v._v("#")]),v._v(" 网络层")]),v._v(" "),e("p",[v._v("网络层规定了网络连接的建立、维持和拆除的协议，它的主要功能是利用数据链路层所提供的相邻节点间的无差错数据传输功能，通过路由选择和中继功能，实现两个系统之间的连接。")]),v._v(" "),e("h3",{attrs:{id:"采用设计"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#采用设计"}},[v._v("#")]),v._v(" 采用设计")]),v._v(" "),e("ul",[e("li",[v._v("网络层只提供简单灵活的、无连接的、尽最大努力交付的数据报服务。")]),v._v(" "),e("li",[v._v("网络在发送分组时不需要先建立连接。每一个分组即"),e("code",[v._v("IP")]),v._v("数据报，独立发送，与其前后的分组无关，即不进行编号。")]),v._v(" "),e("li",[v._v("网络层不提供服务质量的承诺，即所传送的分组可能出错、丢失、重复和失序，也不保证分组传送的时限。")])]),v._v(" "),e("h3",{attrs:{id:"虚电路与电路交换"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚电路与电路交换"}},[v._v("#")]),v._v(" 虚电路与电路交换")]),v._v(" "),e("ul",[e("li",[v._v("虚电路表示这只是一条逻辑上的连接，分组都沿着这条逻辑连接按照存储转发方式传送，而并不是真正建立了一条物理连接。")]),v._v(" "),e("li",[v._v("电路交换的电话通信是先建立了一条真正的连接，因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样。")])]),v._v(" "),e("h3",{attrs:{id:"虚电路与数据报"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#虚电路与数据报"}},[v._v("#")]),v._v(" 虚电路与数据报")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("对比方面")]),v._v(" "),e("th",[v._v("虚电路服务")]),v._v(" "),e("th",[v._v("数据报服务")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("思路")]),v._v(" "),e("td",[v._v("可靠通信应当由网络来保证")]),v._v(" "),e("td",[v._v("可靠通信应当由用户主机来保证")])]),v._v(" "),e("tr",[e("td",[v._v("建立连接")]),v._v(" "),e("td",[v._v("必须有")]),v._v(" "),e("td",[v._v("不需要")])]),v._v(" "),e("tr",[e("td",[v._v("终点地址")]),v._v(" "),e("td",[v._v("仅在连接建立阶段使用，每个分组使用短的虚电路号")]),v._v(" "),e("td",[v._v("每个分组都有终点的完整地址")])]),v._v(" "),e("tr",[e("td",[v._v("分组转发")]),v._v(" "),e("td",[v._v("属于同一条虚电路的分组均按照同一路由进行转发")]),v._v(" "),e("td",[v._v("每个分组独立选择路由进行转发")])]),v._v(" "),e("tr",[e("td",[v._v("当结点出故障时")]),v._v(" "),e("td",[v._v("所有通过出故障的结点的虚电路均不能工作")]),v._v(" "),e("td",[v._v("出故障的结点可能会丢失分组，一些路由可能会发生变化")])]),v._v(" "),e("tr",[e("td",[v._v("分组的顺序")]),v._v(" "),e("td",[v._v("总是按发送顺序到达终点")]),v._v(" "),e("td",[v._v("到达终点时不一定按发送顺序")])]),v._v(" "),e("tr",[e("td",[v._v("端到端的差错处理和流量控制")]),v._v(" "),e("td",[v._v("可以由网络负责，也由用户主机负责")]),v._v(" "),e("td",[v._v("可以由用户主机负责")])])])]),v._v(" "),e("h3",{attrs:{id:"ip地址分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ip地址分类"}},[v._v("#")]),v._v(" IP地址分类")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("A")]),v._v("类地址: 网络号字段"),e("code",[v._v("Net-Id")]),v._v("为"),e("code",[v._v("1")]),v._v("字节，主机号字段"),e("code",[v._v("Host-Id")]),v._v("为"),e("code",[v._v("3")]),v._v("字节。")]),v._v(" "),e("li",[e("code",[v._v("B")]),v._v("类地址: 网络号字段"),e("code",[v._v("Net-Id")]),v._v("为"),e("code",[v._v("2")]),v._v("字节，主机号字段"),e("code",[v._v("Host-Id")]),v._v("为"),e("code",[v._v("2")]),v._v("字节。")]),v._v(" "),e("li",[e("code",[v._v("C")]),v._v("类地址: 网络号字段"),e("code",[v._v("Net-Id")]),v._v("为"),e("code",[v._v("3")]),v._v("字节，主机号字段"),e("code",[v._v("Host-Id")]),v._v("为"),e("code",[v._v("1")]),v._v("字节。")]),v._v(" "),e("li",[e("code",[v._v("D")]),v._v("类地址: 多播地址。")]),v._v(" "),e("li",[e("code",[v._v("E")]),v._v("类地址: 保留为今后使用。")])]),v._v(" "),e("h3",{attrs:{id:"arp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#arp协议"}},[v._v("#")]),v._v(" ARP协议")]),v._v(" "),e("ul",[e("li",[v._v("不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是必须使用硬件``MAC`地址。")]),v._v(" "),e("li",[v._v("每一个主机都设有一个"),e("code",[v._v("ARP")]),v._v("高速缓存，里面有所在的局域网上的各主机和路由器的"),e("code",[v._v("IP")]),v._v("地址到硬件"),e("code",[v._v("MAC")]),v._v("地址的映射表。")]),v._v(" "),e("li",[e("code",[v._v("ARP")]),v._v("是解决同一个局域网上的主机或路由器的"),e("code",[v._v("IP")]),v._v("地址和硬件"),e("code",[v._v("MAC")]),v._v("地址的映射问题。")])]),v._v(" "),e("h3",{attrs:{id:"icmp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#icmp协议"}},[v._v("#")]),v._v(" ICMP协议")]),v._v(" "),e("p",[e("code",[v._v("ICMP")]),v._v("报文的种类有两种，即"),e("code",[v._v("ICMP")]),v._v("差错报告报文和"),e("code",[v._v("ICMP")]),v._v("询问报文。"),e("code",[v._v("ICMP")]),v._v("协议主要用于在主机与路由器之间传递控制信息，包括报告错误、交换受限控制和状态信息等。当遇到"),e("code",[v._v("IP")]),v._v("数据无法访问目标、"),e("code",[v._v("IP")]),v._v("路由器无法按当前的传输速率转发数据包等情况时，会自动发送"),e("code",[v._v("ICMP")]),v._v("消息，"),e("code",[v._v("ping")]),v._v("命令就是基于"),e("code",[v._v("ICMP")]),v._v("协议。")]),v._v(" "),e("h3",{attrs:{id:"划分子网方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#划分子网方式"}},[v._v("#")]),v._v(" 划分子网方式")]),v._v(" "),e("ul",[e("li",[v._v("从主机号借用若干个位作为子网号"),e("code",[v._v("Subnet-id")]),v._v("，而主机号"),e("code",[v._v("Host-Id")]),v._v("也就相应减少了若干个位。")]),v._v(" "),e("li",[v._v("使用子网掩码标识将"),e("code",[v._v("IP")]),v._v("地址划分成网络地址和主机地址两部分。")]),v._v(" "),e("li",[v._v("使用无分类域间路由选择"),e("code",[v._v("CIDR")]),v._v("，在"),e("code",[v._v("IP")]),v._v("地址后面加上一个斜线"),e("code",[v._v("/")]),v._v("，然后写上网络前缀所占的位数，将网络前缀都相同的连续的"),e("code",[v._v("IP")]),v._v("地址组成"),e("code",[v._v("CIDR")]),v._v("地址块。")])]),v._v(" "),e("h3",{attrs:{id:"路由协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路由协议"}},[v._v("#")]),v._v(" 路由协议")]),v._v(" "),e("ul",[e("li",[v._v("内部网关协议"),e("code",[v._v("IGP")]),v._v("，即在一个自治系统内部使用的路由选择协议，目前这类路由选择协议使用得最多，如"),e("code",[v._v("RIP")]),v._v("和"),e("code",[v._v("OSPF")]),v._v("协议。")]),v._v(" "),e("li",[v._v("外部网关协议"),e("code",[v._v("EGP")]),v._v("，若源站和目的站处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中，这样的协议就是外部网关协议"),e("code",[v._v("EGP")]),v._v("，在外部网关协议中目前使用最多的是"),e("code",[v._v("BGP-4")]),v._v("。")])]),v._v(" "),e("h3",{attrs:{id:"rip协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rip协议"}},[v._v("#")]),v._v(" RIP协议")]),v._v(" "),e("ul",[e("li",[v._v("仅和相邻路由器交换信息。")]),v._v(" "),e("li",[v._v("交换的信息是当前本路由器所知道的全部信息，即自己的路由表。")]),v._v(" "),e("li",[v._v("按固定的时间间隔交换路由信息。")]),v._v(" "),e("li",[e("code",[v._v("RIP")]),v._v("存在的一个问题是当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器。")]),v._v(" "),e("li",[e("code",[v._v("RIP")]),v._v("协议最大的优点就是实现简单，开销较小。")]),v._v(" "),e("li",[e("code",[v._v("RIP")]),v._v("限制了网络的规模，它能使用的最大距离为"),e("code",[v._v("15")]),v._v("，"),e("code",[v._v("16")]),v._v("表示不可达。路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。")])]),v._v(" "),e("h3",{attrs:{id:"ospf协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ospf协议"}},[v._v("#")]),v._v(" OSPF协议")]),v._v(" "),e("ul",[e("li",[v._v("向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。")]),v._v(" "),e("li",[v._v("发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息，链路状态就是说明本路由器都和哪些路由器相邻，以及该链路的度量。")]),v._v(" "),e("li",[v._v("只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。")]),v._v(" "),e("li",[v._v("由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。")]),v._v(" "),e("li",[v._v("这个数据库实际上就是全网的拓扑结构图，它在全网范围内是一致的，这称为链路状态数据库的同步。")]),v._v(" "),e("li",[e("code",[v._v("OSPF")]),v._v("的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。"),e("code",[v._v("OSPF")]),v._v(" 的更新过程收敛得快是其重要优点。")]),v._v(" "),e("li",[e("code",[v._v("OSPF")]),v._v("规定每隔一段时间刷新一次数据库中的链路状态。")]),v._v(" "),e("li",[e("code",[v._v("OSPF")]),v._v("没有坏消息传播得慢的问题。")]),v._v(" "),e("li",[v._v("一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系，当互联网规模很大时，"),e("code",[v._v("OSPF")]),v._v("协议表现要比距离向量协议"),e("code",[v._v("RIP")]),v._v("好。")])]),v._v(" "),e("h3",{attrs:{id:"bgp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bgp协议"}},[v._v("#")]),v._v(" BGP协议")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("BGP")]),v._v("是不同自治系统的路由器之间交换路由信息的协议。")]),v._v(" "),e("li",[v._v("每一个自治系统的管理员要选择至少一个路由器作为该自治系统的"),e("code",[v._v("BGP")]),v._v("发言人。")]),v._v(" "),e("li",[v._v("一个"),e("code",[v._v("BGP")]),v._v("发言人与其他自治系统中的"),e("code",[v._v("BGP")]),v._v("发言人要交换路由信息，就要先建立"),e("code",[v._v("TCP")]),v._v("连接，然后在此连接上交换"),e("code",[v._v("BGP")]),v._v("报文以建立"),e("code",[v._v("BGP")]),v._v("会话，利用"),e("code",[v._v("BGP")]),v._v("会话交换路由信息。")]),v._v(" "),e("li",[v._v("使用"),e("code",[v._v("TCP")]),v._v("连接能提供可靠的服务，也简化了路由选择协议。")]),v._v(" "),e("li",[v._v("使用"),e("code",[v._v("TCP")]),v._v("连接交换路由信息的两个"),e("code",[v._v("BGP")]),v._v("发言人，彼此成为对方的邻站或对等站。")])]),v._v(" "),e("h3",{attrs:{id:"内网ip段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内网ip段"}},[v._v("#")]),v._v(" 内网IP段")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("A")]),v._v("类: "),e("code",[v._v("10.0.0.0 - 10.255.255.255")])]),v._v(" "),e("li",[e("code",[v._v("B")]),v._v("类: "),e("code",[v._v("172.16.0.0 - 172.31.255.255")])]),v._v(" "),e("li",[e("code",[v._v("C")]),v._v("类: "),e("code",[v._v("192.168.0.0 - 192.168.255.255")])])]),v._v(" "),e("h2",{attrs:{id:"运输层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运输层"}},[v._v("#")]),v._v(" 运输层")]),v._v(" "),e("p",[v._v("运输层完成网络各层次之间的数据传送控制，主要功能是开放系统之间的数据的收发确认，同时还用于弥补各种通信网络的质量差异，对经过下三层之后仍然存在的传输差错进行恢复，进一步提高可靠性，另外，还通过复用、分段和组合、连接和分离、分流和合流等技术措施，提高吞吐量和服务质量。")]),v._v(" "),e("h3",{attrs:{id:"tcp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp协议"}},[v._v("#")]),v._v(" TCP协议")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("TCP")]),v._v("是面向连接的协议，提供全双工通信，需要建立链接之后再传输数据，数据传输负载相对较大。")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("提供可靠交付的服务，使用流量控制和拥塞控制等服务保证可靠通信。")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("首部最小"),e("code",[v._v("20")]),v._v("字节，最大"),e("code",[v._v("60")]),v._v("字节，包括源端口、目的端口、序号、确认号、数据偏移、控制标志、窗口、校验和、紧急指针、选项等信息。")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("只能是一对一通信。")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("面向字节流通信。")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("保证数据传输的顺序，通过给"),e("code",[v._v("TCP")]),v._v("连接中传送数据流的每个字节都编上序号来确定传输顺序。")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("提供校验和、确认应答、序列号、超时重传、连接管理、流量控制、拥塞控制等功能。")]),v._v(" "),e("li",[e("code",[v._v("TCP")]),v._v("适用于要求可靠传输的应用，如文件传输等")])]),v._v(" "),e("h4",{attrs:{id:"三次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三次握手"}},[v._v("#")]),v._v(" 三次握手")]),v._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("client                                      server\n主动打开 →          SYN=1,seq=x          → 被动打开，接收\n(同步已发送)                               (同步收到)\n接收     ←   SYN=1,ACK=1,seq=y,ack=x+1   ← 发送\n(已建立链接)                               (同步收到)\n发送     →      ACK=1,seq=x+1,ack=y+1    →  接收\n(已建立链接)                               (已建立链接)\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br"),e("span",{staticClass:"line-number"},[v._v("3")]),e("br"),e("span",{staticClass:"line-number"},[v._v("4")]),e("br"),e("span",{staticClass:"line-number"},[v._v("5")]),e("br"),e("span",{staticClass:"line-number"},[v._v("6")]),e("br"),e("span",{staticClass:"line-number"},[v._v("7")]),e("br")])]),e("ol",[e("li",[v._v("第一次握手：客户端主动链接服务器，发送初始序列号"),e("code",[v._v("seq=x")]),v._v("与"),e("code",[v._v("SYN=1")]),v._v("同步请求标志，并进入同步已发送"),e("code",[v._v("SYN_SENT")]),v._v("状态，等待服务器确认。")]),v._v(" "),e("li",[v._v("第二次握手：服务端收到消息后发送确认标志"),e("code",[v._v("ACK=1")]),v._v("与同步请求标志"),e("code",[v._v("SYN=1")]),v._v("，发送自己的序列号"),e("code",[v._v("seq=y")]),v._v("以及客户端确认序号"),e("code",[v._v("ack=x+1")]),v._v("，此时服务器进入同步收到"),e("code",[v._v("SYN_RECV")]),v._v("状态。")]),v._v(" "),e("li",[v._v("第三次握手：客户端收到消息后发送确认标志"),e("code",[v._v("ACK=1")]),v._v("，发送自己的序列号"),e("code",[v._v("seq=x+1")]),v._v("与服务器确认号"),e("code",[v._v("ack=y+1")]),v._v("，发送过后即确认链接已建立状态"),e("code",[v._v("ESTABLISHED")]),v._v("，服务端接收确认信息后进入链接已建立状态"),e("code",[v._v("ESTABLISHED")])])]),v._v(" "),e("h4",{attrs:{id:"四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四次挥手"}},[v._v("#")]),v._v(" 四次挥手")]),v._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("client                                      server\n主动关闭 →          FIN=1,seq=u          → 被动关闭，接收\n(终止等待1)                               (关闭等待)\n接收     ←      ACK=1,seq=v,ack=u+1      ← 发送\n(终止等待2)                               (关闭等待)\n接收     ←   FIN=1,ACK=1,seq=w,ack=u+1   ← 发送\n(时间等待)                                (最后确认)\n发送     →      ACK=1,seq=u+1,ack=w+1    → 接收\n(时间等待 2MSL 关闭)                      (关闭)\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br"),e("span",{staticClass:"line-number"},[v._v("3")]),e("br"),e("span",{staticClass:"line-number"},[v._v("4")]),e("br"),e("span",{staticClass:"line-number"},[v._v("5")]),e("br"),e("span",{staticClass:"line-number"},[v._v("6")]),e("br"),e("span",{staticClass:"line-number"},[v._v("7")]),e("br"),e("span",{staticClass:"line-number"},[v._v("8")]),e("br"),e("span",{staticClass:"line-number"},[v._v("9")]),e("br")])]),e("ol",[e("li",[v._v("第一次挥手：客户端发出释放标识"),e("code",[v._v("FIN=1")]),v._v("，自己的序列号"),e("code",[v._v("seq=u")]),v._v("，进入终止等待"),e("code",[v._v("FIN-WAIT-1")]),v._v("状态")]),v._v(" "),e("li",[v._v("第二次挥手：服务端收到消息后发出"),e("code",[v._v("ACK=1")]),v._v("确认标志和客户端的确认号"),e("code",[v._v("ack=u+1")]),v._v("，自己的序列号"),e("code",[v._v("seq=v")]),v._v("，进入关闭等待"),e("code",[v._v("CLOSE-WAIT")]),v._v("状态，客户端收到消息后进入终止等待"),e("code",[v._v("FIN-WAIT-2")]),v._v("状态")]),v._v(" "),e("li",[v._v("第三次挥手：服务器发送释放标识"),e("code",[v._v("FIN=1")]),v._v("信号，确认标志"),e("code",[v._v("ACK=1")]),v._v("，确认序号"),e("code",[v._v("ack=u+1")]),v._v("，自己的序列号"),e("code",[v._v("seq=w")]),v._v("，服务器进入最后确认"),e("code",[v._v("LAST-ACK")]),v._v("状态")]),v._v(" "),e("li",[v._v("第四次挥手：客户端收到回复后，发送确认标志"),e("code",[v._v("ACK=1")]),v._v("，确认序号"),e("code",[v._v("ack=w+1")]),v._v("，自己的序列号"),e("code",[v._v("seq=u+1")]),v._v("，客户端进入时间等待"),e("code",[v._v("TIME-WAIT")]),v._v("状态，经过"),e("code",[v._v("2")]),v._v("个最长报文段寿命后，客户端"),e("code",[v._v("CLOSE")]),v._v("。服务器收到确认后，立刻进入"),e("code",[v._v("CLOSE")]),v._v("状态。")])]),v._v(" "),e("h4",{attrs:{id:"传输控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传输控制"}},[v._v("#")]),v._v(" 传输控制")]),v._v(" "),e("ul",[e("li",[v._v("流量控制: 利用滑动窗口实现流量控制，让发送方的发送速率不要太快，既要让接收方来得及接收，也不要使网络发生拥塞。")]),v._v(" "),e("li",[v._v("拥塞控制\n"),e("ul",[e("li",[v._v("慢开始，只要网络没有出现拥塞，拥塞窗口就再增大一些，以便把更多的分组发送出去，但只要网络出现拥塞，拥塞窗口就减小一些，以减少注入到网络中的分组数。")]),v._v(" "),e("li",[v._v("拥塞避免，无论在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就要把慢开始门限设置为出现拥塞时的发送方窗口值的一半。")]),v._v(" "),e("li",[v._v("快重传: 首先要求接收方每收到一个失序的报文段后就立即发出重复确认，这样做可以让发送方及早知道有报文段没有到达接收方，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段。")]),v._v(" "),e("li",[v._v("快恢复: 当发送端收到连续三个重复的确认时，就执行乘法减小算法，把慢开始门限减半，但接下去不执行慢开始算法，而是设置为慢开始门限减半后的数值，然后开始执行拥塞避免算法加法增大，使拥塞窗口缓慢地线性增大。")])])]),v._v(" "),e("li",[v._v("超时重传: 一般使用"),e("code",[v._v("Karn")]),v._v("算法，当计算平均往返时延"),e("code",[v._v("RTT")]),v._v("时，只要报文段重传了，就不采用其往返时间样本，这样得出的加权平均平均往返时间"),e("code",[v._v("RTT")]),v._v("和超时重传时间"),e("code",[v._v("RTO")]),v._v("就较准确。")])]),v._v(" "),e("h4",{attrs:{id:"连续arq协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连续arq协议"}},[v._v("#")]),v._v(" 连续ARQ协议")]),v._v(" "),e("ul",[e("li",[v._v("接收方一般采用累积确认的方式。即不必对收到的分组逐个发送确认，而是对按序到达的最后一个分组发送确认，这样就表示：到这个分组为止的所有分组都已正确收到了。")]),v._v(" "),e("li",[v._v("累积确认有的优点是：容易实现，即使确认丢失也不必重传。缺点是：不能向发送方反映出接收方已经正确收到的所有分组的信息。")])]),v._v(" "),e("h3",{attrs:{id:"udp协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#udp协议"}},[v._v("#")]),v._v(" UDP协议")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("UDP")]),v._v("是无连接的，即发送数据之前不需要建立连接，数据传输负载相对较小。")]),v._v(" "),e("li",[e("code",[v._v("UDP")]),v._v("使用尽最大努力交付，即不保证可靠交付，同时也不使用流量控制和拥塞控制。")]),v._v(" "),e("li",[e("code",[v._v("UDP")]),v._v("首部"),e("code",[v._v("8")]),v._v("字节，包括源端口、目的端口、长度、校验和信息。")]),v._v(" "),e("li",[e("code",[v._v("UDP")]),v._v("具有单播、多播、广播的功能，支持一对一、一对多、多对多、多对一的数据传输方式。")]),v._v(" "),e("li",[e("code",[v._v("UDP")]),v._v("是面向报文通信，对应用层交下来的报文，既不合并，也不拆分，而是保留这些报文的边界，在添加首部后就向下交付"),e("code",[v._v("IP")]),v._v("层。")]),v._v(" "),e("li",[e("code",[v._v("UDP")]),v._v("不保证数据传输的顺序，需要应用层程序在数据段加入序号等方式控制顺序。")]),v._v(" "),e("li",[e("code",[v._v("UDP")]),v._v("只在"),e("code",[v._v("IP")]),v._v("的数据报服务之上增加了很少一点的功能，即端口的功能和差错检测的功能。")]),v._v(" "),e("li",[e("code",[v._v("UDP")]),v._v("适用于实时应用，如网络电话、视频会议、直播等")])]),v._v(" "),e("h2",{attrs:{id:"应用层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[v._v("#")]),v._v(" 应用层")]),v._v(" "),e("p",[v._v("一般将会话层、表示层、应用层归为为应用层。")]),v._v(" "),e("h3",{attrs:{id:"会话层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#会话层"}},[v._v("#")]),v._v(" 会话层")]),v._v(" "),e("p",[v._v("会话层依靠传输层以下的通信功能使数据传送功能在开放系统间有效地进行。其主要功能是按照在应用进程之间的约定，按照正确的顺序收发数据，进行各种形式的对话。控制方式可以归纳为以下两类：一是为了在会话应用中易于实现接受处理和发送处理的逐次交替变换，设置某一时刻只有一端发送数据。因此需要有交替改变发信端的传送控制。二是在类似文件传送等单方向传送大量数据的情况下，为了防备应用处理中出现意外，在传送数据的过程中需要给数据记上标记。当出现意外时，可以由记标记处重发。例如可以将长文件分页发送，当收到上页的接受确认后，再发下页的内容。")]),v._v(" "),e("h3",{attrs:{id:"表示层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表示层"}},[v._v("#")]),v._v(" 表示层")]),v._v(" "),e("p",[v._v("表示层的主要功能是把应用层提供的信息变换为能够共同理解的形式，提供字符代码、数据格式、控制信息格式、加密等的统一表示，表示层仅对应用层信息内容的形式进行变换，而不改变其内容本身。")]),v._v(" "),e("h3",{attrs:{id:"应用层-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#应用层-2"}},[v._v("#")]),v._v(" 应用层")]),v._v(" "),e("p",[v._v("应用层是"),e("code",[v._v("OSI")]),v._v("参考模型的最高层，其功能是实现应用进程之间的信息交换，同时还具有一系列业务处理所需要的服务功能。")]),v._v(" "),e("h3",{attrs:{id:"常见应用层协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常见应用层协议"}},[v._v("#")]),v._v(" 常见应用层协议")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("DNS")]),v._v("协议: 域名服务协议，将域名地址转换为"),e("code",[v._v("IP")]),v._v("地址，域名解析查询时通常使用"),e("code",[v._v("UDP")]),v._v("传输数据，默认端口"),e("code",[v._v("53")]),v._v("，在区域传输数据同步时一般使用"),e("code",[v._v("TCP")]),v._v("传输数据。")]),v._v(" "),e("li",[e("code",[v._v("FTP")]),v._v("协议: 文件传输协议，提供交互式的访问，允许客户指明文件的类型与格式，并允许文件具有存取权限，使用"),e("code",[v._v("TCP")]),v._v("进行数据传输，控制信息默认"),e("code",[v._v("21")]),v._v("端口，主动模式下数据传输默认"),e("code",[v._v("20")]),v._v("端口，被动模式下默认服务器与客户端协商在"),e("code",[v._v("39000-40000")]),v._v("之间的端口。")]),v._v(" "),e("li",[e("code",[v._v("TFTP")]),v._v("协议: 简单文件传送协议，很小且易于实现的文件传送协议，使用"),e("code",[v._v("UDP")]),v._v("传输数据，默认"),e("code",[v._v("69")]),v._v("端口。")]),v._v(" "),e("li",[e("code",[v._v("TELNET")]),v._v("协议: 远程终端协议，简单的远程终端协议，明文传输协议，使用"),e("code",[v._v("TCP")]),v._v("传输数据，默认端口"),e("code",[v._v("23")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("SSH")]),v._v("协议: 安全外壳协议，提供安全的远程终端会话，使用"),e("code",[v._v("TCP")]),v._v("传输数据，默认端口"),e("code",[v._v("22")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("HTTP")]),v._v("协议: 超文本传输协议，简单的请求响应协议，使用"),e("code",[v._v("TCP")]),v._v("传输数据，默认端口"),e("code",[v._v("80")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("HTTPS")]),v._v("协议: 超文本传输安全协议，在"),e("code",[v._v("HTTP")]),v._v("协议的基础下加入"),e("code",[v._v("SSL")]),v._v("层实现加密传输，使用"),e("code",[v._v("TCP")]),v._v("传输数据，默认端口"),e("code",[v._v("443")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("SMTP")]),v._v("协议: 简单邮件传输协议，提供可靠且有效的电子邮件传输的协议，使用"),e("code",[v._v("TCP")]),v._v("传输数据，默认端口"),e("code",[v._v("25")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("POP3")]),v._v("协议: 邮局协议，简单的邮件读取协议，使用"),e("code",[v._v("TCP")]),v._v("传输数据，默认端口"),e("code",[v._v("110")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("IMAP")]),v._v("协议: 交互邮件访问协议，交互式进行邮件的访问，使用"),e("code",[v._v("TCP")]),v._v("传输数据，默认端口"),e("code",[v._v("143")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("DHCP")]),v._v("协议: 动态主机配置协议，用于动态分配"),e("code",[v._v("IP")]),v._v("地址，使用"),e("code",[v._v("UDP")]),v._v("传输数据，客户端发送到"),e("code",[v._v("DHCP")]),v._v("服务器默认"),e("code",[v._v("67")]),v._v("端口，"),e("code",[v._v("DHCP")]),v._v("服务器应答客户端默认"),e("code",[v._v("68")]),v._v("端口。")]),v._v(" "),e("li",[e("code",[v._v("SNMP")]),v._v("协议: 简单网络管理协议，用于"),e("code",[v._v("IP")]),v._v("网络管理的协议，使用"),e("code",[v._v("UDP")]),v._v("传输数据，默认代理端口"),e("code",[v._v("161")]),v._v("与管理站端口"),e("code",[v._v("162")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"每日一题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[v._v("#")]),v._v(" 每日一题")]),v._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("https://github.com/WindrunnerMax/EveryDay\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br")])])])}),[],!1,null,null,null);_.default=t.exports}}]);