(window.webpackJsonp=window.webpackJsonp||[]).push([[331],{697:function(v,_,e){"use strict";e.r(_);var t=e(45),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"git常用命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git常用命令"}},[v._v("#")]),v._v(" Git常用命令")]),v._v(" "),e("p",[e("code",[v._v("Git")]),v._v("是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目，"),e("code",[v._v("Git")]),v._v("擅长的是程序代码的版本化管理，对程序源代码进行差异化的版本管理，代码库占极少的空间，可以说"),e("code",[v._v("Git")]),v._v("是目前世界上最先进的分布式版本控制系统。")]),v._v(" "),e("h2",{attrs:{id:"工作位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作位置"}},[v._v("#")]),v._v(" 工作位置")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("Workspace")]),v._v("：工作区。")]),v._v(" "),e("li",[e("code",[v._v("Index/Stage")]),v._v("：暂存区。")]),v._v(" "),e("li",[e("code",[v._v("Repository")]),v._v("：本地仓库。")]),v._v(" "),e("li",[e("code",[v._v("Remote")]),v._v("：远程仓库。")])]),v._v(" "),e("h2",{attrs:{id:"配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置"}},[v._v("#")]),v._v(" 配置")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git config --list")]),v._v(": 显示当前的"),e("code",[v._v("Git")]),v._v("配置。")]),v._v(" "),e("li",[e("code",[v._v("git config -e [--global]")]),v._v(": 编辑"),e("code",[v._v("Git")]),v._v("配置文件。")]),v._v(" "),e("li",[e("code",[v._v('git config [--global] user.name "[name]"')]),v._v(": 以"),e("code",[v._v("name")]),v._v("为例配置单个属性。")])]),v._v(" "),e("h2",{attrs:{id:"创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建"}},[v._v("#")]),v._v(" 创建")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git clone ssh://user@domain.com:22/resources.git")]),v._v(": 克隆远程仓库。")]),v._v(" "),e("li",[e("code",[v._v("git init")]),v._v(": 初始化本地"),e("code",[v._v("git")]),v._v("仓库，新建仓库，通常使用"),e("code",[v._v("--bare")]),v._v("选项初始化远程仓库。")])]),v._v(" "),e("h2",{attrs:{id:"增加或删除文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#增加或删除文件"}},[v._v("#")]),v._v(" 增加或删除文件")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git add [file1] [file2] ...")]),v._v(": 添加指定文件到暂存区。")]),v._v(" "),e("li",[e("code",[v._v("git add [dir]")]),v._v(": 添加指定目录到暂存区，包括子目录。")]),v._v(" "),e("li",[e("code",[v._v("git add .")]),v._v(": 添加当前目录的所有文件到暂存区。")]),v._v(" "),e("li",[e("code",[v._v("git add -p")]),v._v(": 添加每个变化前，都会要求确认，对于同一个文件的多处变化，可以实现分次提交。")]),v._v(" "),e("li",[e("code",[v._v("git rm [file1] [file2] ...")]),v._v(": 删除工作区文件，并且将这次删除放入暂存区。")]),v._v(" "),e("li",[e("code",[v._v("git rm --cached [file]")]),v._v(": 从暂存区删除文件，工作区则不做出改变。")]),v._v(" "),e("li",[e("code",[v._v("git mv [file-original] [file-renamed]")]),v._v(": 改名文件，并且将这个改名放入暂存区。")])]),v._v(" "),e("h2",{attrs:{id:"代码提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码提交"}},[v._v("#")]),v._v(" 代码提交")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git commit -m [message]")]),v._v(": 提交暂存区到仓库区。")]),v._v(" "),e("li",[e("code",[v._v("git commit [file1] [file2] ... -m [message]")]),v._v(": 提交暂存区的指定文件到仓库区。")]),v._v(" "),e("li",[e("code",[v._v("git commit -a")]),v._v(": 提交工作区自上次"),e("code",[v._v("commit")]),v._v("之后的变化，直接到仓库区。")]),v._v(" "),e("li",[e("code",[v._v("git commit -v")]),v._v(": 提交时显示所有"),e("code",[v._v("diff")]),v._v("信息。")]),v._v(" "),e("li",[e("code",[v._v("git commit --amend -m [message]")]),v._v(": 用一次新的"),e("code",[v._v("commit")]),v._v("，替代上一次提交，如果代码没有任何新变化，则用来改写上一次"),e("code",[v._v("commit")]),v._v("的提交信息。")]),v._v(" "),e("li",[e("code",[v._v("git commit --amend [file1] [file2] ...")]),v._v(": 重做上一次"),e("code",[v._v("commit")]),v._v("，并包括指定文件的新变化。")])]),v._v(" "),e("h2",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[v._v("#")]),v._v(" 分支")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git branch")]),v._v(": 列出所有本地分支。")]),v._v(" "),e("li",[e("code",[v._v("git branch -r")]),v._v(": 列出所有远程分支。")]),v._v(" "),e("li",[e("code",[v._v("git branch -a")]),v._v(": 列出所有本地分支和远程分支。")]),v._v(" "),e("li",[e("code",[v._v("git branch [branch-name]")]),v._v(": 新建一个分支，但依然停留在当前分支。")]),v._v(" "),e("li",[e("code",[v._v("git checkout -b [branch]")]),v._v(": 新建一个分支，并切换到该分支。")]),v._v(" "),e("li",[e("code",[v._v("git branch [branch] [commit]")]),v._v(": 新建一个分支，指向指定"),e("code",[v._v("commit")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git branch --track [branch] [remote-branch]")]),v._v(": 新建一个分支，与指定的远程分支建立追踪关系。")]),v._v(" "),e("li",[e("code",[v._v("git checkout [branch-name]")]),v._v(": 切换到指定分支，并更新工作区。")]),v._v(" "),e("li",[e("code",[v._v("git checkout -")]),v._v(": 切换到上一个分支。")]),v._v(" "),e("li",[e("code",[v._v("git branch --set-upstream [branch] [remote-branch]")]),v._v(": 建立追踪关系，在现有分支与指定的远程分支之间。")]),v._v(" "),e("li",[e("code",[v._v("git merge [branch]")]),v._v(": 合并指定分支到当前分支。")]),v._v(" "),e("li",[e("code",[v._v("git cherry-pick [commit]")]),v._v(": 择一个"),e("code",[v._v("commit")]),v._v("，合并进当前分支。")]),v._v(" "),e("li",[e("code",[v._v("git branch -d [branch-name]")]),v._v(": 删除分支。")]),v._v(" "),e("li",[e("code",[v._v("git push origin --delete [branch-name]")]),v._v(": 删除远程分支。")])]),v._v(" "),e("h2",{attrs:{id:"标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标签"}},[v._v("#")]),v._v(" 标签")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git tag")]),v._v(": 列出所有"),e("code",[v._v("tag")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git tag [tag]")]),v._v(": 新建一个"),e("code",[v._v("tag")]),v._v("在当前"),e("code",[v._v("commit")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git tag [tag] [commit]")]),v._v(": 新建一个"),e("code",[v._v("tag")]),v._v("在指定"),e("code",[v._v("commit")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git tag -d [tag]")]),v._v(": 删除本地"),e("code",[v._v("tag")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git push origin :refs/tags/[tagName]")]),v._v(": 删除远程"),e("code",[v._v("tag")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git show [tag]")]),v._v(": 查看"),e("code",[v._v("tag")]),v._v("信息。")]),v._v(" "),e("li",[e("code",[v._v("git push [remote] [tag]")]),v._v(": 提交指定"),e("code",[v._v("tag")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git push [remote] --tags")]),v._v(": 提交所有"),e("code",[v._v("tag")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git checkout -b [branch] [tag]")]),v._v(": 新建一个分支，指向某个"),e("code",[v._v("tag")]),v._v("。")])]),v._v(" "),e("h2",{attrs:{id:"查看信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#查看信息"}},[v._v("#")]),v._v(" 查看信息")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git status")]),v._v(": 显示有变更的文件。")]),v._v(" "),e("li",[e("code",[v._v("git log")]),v._v(": 显示当前分支的版本历史。")]),v._v(" "),e("li",[e("code",[v._v("git log --stat")]),v._v(": 显示"),e("code",[v._v("commit")]),v._v("历史，以及每次"),e("code",[v._v("commit")]),v._v("发生变更的文件。")]),v._v(" "),e("li",[e("code",[v._v("git log -S [keyword]")]),v._v(": 搜索提交历史，根据关键。")]),v._v(" "),e("li",[e("code",[v._v("git log [tag] HEAD --pretty=format:%s")]),v._v(": 显示某个"),e("code",[v._v("commit")]),v._v("之后的所有变动，每个"),e("code",[v._v("commit")]),v._v("占据一行。")]),v._v(" "),e("li",[e("code",[v._v("git log [tag] HEAD --grep feature")]),v._v(": 显示某个"),e("code",[v._v("commit")]),v._v("之后的所有变动，其提交说明必须符合搜索条件。")]),v._v(" "),e("li",[e("code",[v._v("git log --follow [file]")]),v._v(": 显示某个文件的版本历史，包括文件改名。")]),v._v(" "),e("li",[e("code",[v._v("git log -p [file]")]),v._v(": 显示指定文件相关的每一次"),e("code",[v._v("diff")]),v._v("。")]),v._v(" "),e("li",[e("code",[v._v("git log -5 --pretty --oneline")]),v._v(": 显示过去"),e("code",[v._v("5")]),v._v("次提交。")]),v._v(" "),e("li",[e("code",[v._v("git shortlog -sn")]),v._v(": 显示所有提交过的用户，按提交次数排序。")]),v._v(" "),e("li",[e("code",[v._v("git blame [file]")]),v._v(": 显示指定文件是什么人在什么时间修改过。")]),v._v(" "),e("li",[e("code",[v._v("git diff")]),v._v(": 显示暂存区和工作区的差异。")]),v._v(" "),e("li",[e("code",[v._v("git diff --cached [file]")]),v._v(": 显示暂存区和上一个"),e("code",[v._v("commit")]),v._v("的差异。")]),v._v(" "),e("li",[e("code",[v._v("git diff HEAD")]),v._v(": 显示工作区与当前分支最新"),e("code",[v._v("commit")]),v._v("之间的差异。")]),v._v(" "),e("li",[e("code",[v._v("git diff [first-branch]...[second-branch]")]),v._v(": 显示两次提交之间的差异。")]),v._v(" "),e("li",[e("code",[v._v('git diff --shortstat "@{0 day ago}"')]),v._v(": 显示今天你写了多少行代码。")]),v._v(" "),e("li",[e("code",[v._v("git show [commit]")]),v._v(": 显示某次提交的元数据和内容变化。")]),v._v(" "),e("li",[e("code",[v._v("git show --name-only [commit]")]),v._v(": 显示某次提交发生变化的文件。")]),v._v(" "),e("li",[e("code",[v._v("git show [commit]:[filename]")]),v._v(": 显示某次提交时，某个文件的内容。")]),v._v(" "),e("li",[e("code",[v._v("git reflog")]),v._v(": 显示当前分支的最近几次提交。")])]),v._v(" "),e("h2",{attrs:{id:"撤销"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#撤销"}},[v._v("#")]),v._v(" 撤销")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git checkout [file]")]),v._v(": 恢复暂存区的指定文件到工作区。")]),v._v(" "),e("li",[e("code",[v._v("git checkout [commit] [file]")]),v._v(": 恢复某个"),e("code",[v._v("commit")]),v._v("的指定文件到暂存区和工作区。")]),v._v(" "),e("li",[e("code",[v._v("git checkout .")]),v._v(": 恢复暂存区的所有文件到工作区。")]),v._v(" "),e("li",[e("code",[v._v("git reset [file]")]),v._v(": 重置暂存区的指定文件，与上一次"),e("code",[v._v("commit")]),v._v("保持一致，但工作区不变。")]),v._v(" "),e("li",[e("code",[v._v("git reset --hard")]),v._v(": 重置暂存区与工作区，与上一次"),e("code",[v._v("commit")]),v._v("保持一致。")]),v._v(" "),e("li",[e("code",[v._v("git reset [commit]")]),v._v(": 重置当前分支的指针为指定"),e("code",[v._v("commit")]),v._v("，同时重置暂存区，但工作区不变。")]),v._v(" "),e("li",[e("code",[v._v("git reset --hard [commit]")]),v._v(": 重置当前分支的"),e("code",[v._v("HEAD")]),v._v("为指定"),e("code",[v._v("commit")]),v._v("，同时重置暂存区和工作区，与指定"),e("code",[v._v("commit")]),v._v("一致。")]),v._v(" "),e("li",[e("code",[v._v("git reset --keep [commit]")]),v._v(": 重置当前"),e("code",[v._v("HEAD")]),v._v("为指定"),e("code",[v._v("commit")]),v._v("，但保持暂存区和工作区不变")]),v._v(" "),e("li",[e("code",[v._v("git revert [commit]")]),v._v(": 新建一个"),e("code",[v._v("commit")]),v._v("，用来撤销指定"),e("code",[v._v("commit")]),v._v("，后者的所有变化都将被前者抵消，并且应用到当前分支。")]),v._v(" "),e("li",[e("code",[v._v("git stash")]),v._v("、"),e("code",[v._v("git stash pop")]),v._v(": 暂时将未提交的变化移除，稍后再移入。")])]),v._v(" "),e("h2",{attrs:{id:"远程同步"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程同步"}},[v._v("#")]),v._v(" 远程同步")]),v._v(" "),e("ul",[e("li",[e("code",[v._v("git fetch [remote]")]),v._v(": 下载远程仓库的所有变动。")]),v._v(" "),e("li",[e("code",[v._v("git remote -v")]),v._v(": 显示所有远程仓库。")]),v._v(" "),e("li",[e("code",[v._v("git remote show [remote]")]),v._v(": 显示某个远程仓库的信息。")]),v._v(" "),e("li",[e("code",[v._v("git remote add [shortname] [url]")]),v._v(": 增加一个新的远程仓库，并命名。")]),v._v(" "),e("li",[e("code",[v._v("git pull [remote] [branch]")]),v._v(": 取回远程仓库的变化，并与本地分支合并。")]),v._v(" "),e("li",[e("code",[v._v("git push [remote] [branch]")]),v._v(": 上传本地指定分支到远程仓库。")]),v._v(" "),e("li",[e("code",[v._v("git push [remote] --force")]),v._v(": 强行推送当前分支到远程仓库，即使有冲突。")]),v._v(" "),e("li",[e("code",[v._v("git push [remote] --all")]),v._v(": 推送所有分支到远程仓库。")])]),v._v(" "),e("h2",{attrs:{id:"每日一题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#每日一题"}},[v._v("#")]),v._v(" 每日一题")]),v._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("https://github.com/WindrunnerMax/EveryDay\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br")])]),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[v._v("#")]),v._v(" 参考")]),v._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[v._v("https://blog.csdn.net/mine_song/article/details/70770467\nhttps://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html\nhttps://www.liaoxuefeng.com/wiki/896043488029600/896067008724000\n")])]),v._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[v._v("1")]),e("br"),e("span",{staticClass:"line-number"},[v._v("2")]),e("br"),e("span",{staticClass:"line-number"},[v._v("3")]),e("br")])])])}),[],!1,null,null,null);_.default=i.exports}}]);